# Project Euler Problem #12
# Highly Divisible Triangle Number
''' The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
'''

#might be a tad slow

def divs1(number):
    # Returns the divisors of a number
    divs=2
    x=2
    minTopDiv=number
    while x<minTopDiv:
        if number%x==0:
            divs+=1
            if number/x !=x:
                divs+=1
                minTopDiv=number/x
        x+=1

    return divs

triangle=3

for x in range(3,999999):
    triangle+=x
    if divs1(triangle)>500:
        break

print(str(triangle)+'  '+str(divs1(triangle)))




# A= 76576500,  with 576 divisors